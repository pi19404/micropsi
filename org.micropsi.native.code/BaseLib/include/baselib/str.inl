//---------------------------------------------------------------------------------------------------------------------
inline
void		
CStr::Clear()										
{ 
	DetachStringData(m_pxData); 
}

//---------------------------------------------------------------------------------------------------------------------
inline
int			
CStr::GetLength() const
{ 
	return m_pxData ? m_pxData->m_iLength : 0; 
}

//---------------------------------------------------------------------------------------------------------------------
inline
bool		
CStr::IsEmpty() const
{ 
	return GetLength() == 0; 
}

//---------------------------------------------------------------------------------------------------------------------
inline
char		
CStr::GetAt(int p_iAt) const						
{ 
	return m_pxData->m_pc[p_iAt]; 
}

//---------------------------------------------------------------------------------------------------------------------
inline
CStr&		
CStr::Insert(int p_iIndex, const CStr& p_krxString)	
{ 
	return Insert(p_iIndex, p_krxString.c_str()); 
}

//---------------------------------------------------------------------------------------------------------------------
inline
const char*	
CStr::c_str() const								
{
	return m_pxData == 0 ? "" : m_pxData->m_pc; 
}

//---------------------------------------------------------------------------------------------------------------------
inline
char
CStr::operator[](int p_iAt) const					
{ 
	return m_pxData->m_pc[p_iAt]; 
}

//---------------------------------------------------------------------------------------------------------------------
inline
bool
CStr::operator==(const char* p_pCStr) const		
{ 
	return Compare(p_pCStr) == 0; 
}

//---------------------------------------------------------------------------------------------------------------------
inline
bool
CStr::operator!=(const char* p_pCStr) const		
{ 
	return Compare(p_pCStr) != 0; 
}

//---------------------------------------------------------------------------------------------------------------------
inline
bool
CStr::operator<(const CStr& p_ksrOther) const		
{ 
	return Compare(p_ksrOther.c_str()) < 0; 
}

//---------------------------------------------------------------------------------------------------------------------
inline
bool
CStr::operator>(const CStr& p_ksrOther) const		
{ 
	return Compare(p_ksrOther.c_str()) > 0; 
}

//---------------------------------------------------------------------------------------------------------------------
inline
bool
CStr::operator<(const char* p_pCStr) const		
{ 
	return Compare(p_pCStr) < 0; 
}

//---------------------------------------------------------------------------------------------------------------------
inline
bool
CStr::operator>(const char* p_pCStr) const		
{ 
	return Compare(p_pCStr) > 0; 
}

//---------------------------------------------------------------------------------------------------------------------